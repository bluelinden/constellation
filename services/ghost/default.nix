# Auto-generated using compose2nix v0.1.7.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."ghost-db" = {
    image = "mysql:8.0";
    environmentFiles = [
      "/etc/blkeys/mysql-pass.env"
    ];
    volumes = [
      "/srv/ghost/db:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=ghost-db"
      "--ip=172.86.0.12"
      "--network=ghost-default"
    ];
  };

  systemd.services."podman-ghost-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-ghost-default.service"
    ];
    requires = [
      "podman-network-ghost-default.service"
    ];
    partOf = [
      "podman-compose-ghost-root.target"
    ];
    wantedBy = [
      "podman-compose-ghost-root.target"
    ];
  };

  virtualisation.oci-containers.containers."ghost-ghost" = {
    image = "ghost:5-alpine";
    environment = {
      database__client = "mysql";
      database__connection__database = "ghost-content";
      database__connection__host = "172.86.0.12";
      database__connection__user = "root";
      url = "https://bluelinden.art";
      server__host = "0.0.0.0";
      server__port = "2368";
      enableDeveloperExperiments = "true";
      admin__url = "https://ghost.bluelinden.art";
      mail__transport = "SMTP";
      mail__from = "mailer@mailer.bluelinden.art";
      mail__options__service = "Mailgun";
    };
    environmentFiles = [
      "/etc/blkeys/ghost-keys.env"
      "/etc/blkeys/ghost-db.env"
    ];
    volumes = [
      "/srv/ghost/content:/var/lib/ghost/content:rw"
    ];
    ports = [
      "2368:2368/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=ghost-ghost"
      "--network=ghost-default"
      "--ip=172.86.0.11"
    ];
  };
  systemd.services."podman-ghost-ghost" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-ghost-default.service"
    ];
    requires = [
      "podman-network-ghost-default.service"
    ];
    partOf = [
      "podman-compose-ghost-root.target"
    ];
    wantedBy = [
      "podman-compose-ghost-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-ghost-default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f ghost-default";
    };
    script = ''
      podman network inspect ghost-default || podman network create ghost-default --subnet=172.86.0.0/16 --opt isolate=true
    '';
    partOf = [ "podman-compose-ghost-root.target" ];
    wantedBy = [ "podman-compose-ghost-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-ghost-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
