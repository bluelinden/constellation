# Auto-generated using compose2nix v0.1.7.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."podsync" = {
    image = "localhost/podsync:latest";
    volumes = [
      "/srv/podsync/config.toml:/app/config.toml:rw"
      "/srv/podsync/data:/app/data:rw"
    ];
    ports = [
      "4124:4124/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=podsync"
      "--network=podsync-default"
    ];
  };
  systemd.services."podman-podsync" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-podsync-default.service"
    ];
    requires = [
      "podman-network-podsync-default.service"
    ];
    partOf = [
      "podman-compose-podsync-root.target"
    ];
    wantedBy = [
      "podman-compose-podsync-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-podsync-default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f podsync-default";
    };
    script = ''
      podman network inspect podsync-default || podman network create podsync-default --opt isolate=true
    '';
    partOf = [ "podman-compose-podsync-root.target" ];
    wantedBy = [ "podman-compose-podsync-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-podsync-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
